### YamlMime:ManagedReference
items:
- uid: "com.microsoft.samples.subpackage.Tuple"
  id: "Tuple"
  parent: "com.microsoft.samples.subpackage"
  children:
  - "com.microsoft.samples.subpackage.Tuple.Tuple(T1,T2)"
  - "com.microsoft.samples.subpackage.Tuple.getItem1()"
  - "com.microsoft.samples.subpackage.Tuple.getItem2()"
  - "com.microsoft.samples.subpackage.Tuple.setItem1(T1)"
  - "com.microsoft.samples.subpackage.Tuple.setItem2(T2)"
  langs:
  - "java"
  name: "Tuple<T1,T2>"
  nameWithType: "Tuple<T1,T2>"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>"
  type: "Class"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public class Tuple<T1,T2>"
    typeParameters:
    - id: "T1"
    - id: "T2"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.samples.subpackage.Tuple.Tuple(T1,T2)"
  id: "Tuple(T1,T2)"
  parent: "com.microsoft.samples.subpackage.Tuple"
  langs:
  - "java"
  name: "Tuple(T1 item1, T2 item2)"
  nameWithType: "Tuple<T1,T2>.Tuple(T1 item1, T2 item2)"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.Tuple(T1 item1, T2 item2)"
  overload: "com.microsoft.samples.subpackage.Tuple.Tuple*"
  type: "Constructor"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public Tuple(T1 item1, T2 item2)"
    parameters:
    - id: "item1"
      type: "T1"
    - id: "item2"
      type: "T2"
- uid: "com.microsoft.samples.subpackage.Tuple.getItem1()"
  id: "getItem1()"
  parent: "com.microsoft.samples.subpackage.Tuple"
  langs:
  - "java"
  name: "getItem1()"
  nameWithType: "Tuple<T1,T2>.getItem1()"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.getItem1()"
  overload: "com.microsoft.samples.subpackage.Tuple.getItem1*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public T1 getItem1()"
    return:
      type: "T1"
- uid: "com.microsoft.samples.subpackage.Tuple.getItem2()"
  id: "getItem2()"
  parent: "com.microsoft.samples.subpackage.Tuple"
  langs:
  - "java"
  name: "getItem2()"
  nameWithType: "Tuple<T1,T2>.getItem2()"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.getItem2()"
  overload: "com.microsoft.samples.subpackage.Tuple.getItem2*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public T2 getItem2()"
    return:
      type: "T2"
- uid: "com.microsoft.samples.subpackage.Tuple.setItem1(T1)"
  id: "setItem1(T1)"
  parent: "com.microsoft.samples.subpackage.Tuple"
  langs:
  - "java"
  name: "setItem1(T1 item1)"
  nameWithType: "Tuple<T1,T2>.setItem1(T1 item1)"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.setItem1(T1 item1)"
  overload: "com.microsoft.samples.subpackage.Tuple.setItem1*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public void setItem1(T1 item1)"
    parameters:
    - id: "item1"
      type: "T1"
- uid: "com.microsoft.samples.subpackage.Tuple.setItem2(T2)"
  id: "setItem2(T2)"
  parent: "com.microsoft.samples.subpackage.Tuple"
  langs:
  - "java"
  name: "setItem2(T2 item2)"
  nameWithType: "Tuple<T1,T2>.setItem2(T2 item2)"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.setItem2(T2 item2)"
  overload: "com.microsoft.samples.subpackage.Tuple.setItem2*"
  type: "Method"
  package: "com.microsoft.samples.subpackage"
  syntax:
    content: "public void setItem2(T2 item2)"
    parameters:
    - id: "item2"
      type: "T2"
references:
- uid: "T1"
  spec.java:
  - uid: "T1"
    name: "T1"
    fullName: "T1"
- uid: "T2"
  spec.java:
  - uid: "T2"
    name: "T2"
    fullName: "T2"
- uid: "com.microsoft.samples.subpackage.Tuple.Tuple*"
  name: "Tuple"
  nameWithType: "Tuple<T1,T2>.Tuple"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.Tuple"
  package: "com.microsoft.samples.subpackage"
- uid: "com.microsoft.samples.subpackage.Tuple.getItem1*"
  name: "getItem1"
  nameWithType: "Tuple<T1,T2>.getItem1"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.getItem1"
  package: "com.microsoft.samples.subpackage"
- uid: "com.microsoft.samples.subpackage.Tuple.setItem1*"
  name: "setItem1"
  nameWithType: "Tuple<T1,T2>.setItem1"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.setItem1"
  package: "com.microsoft.samples.subpackage"
- uid: "com.microsoft.samples.subpackage.Tuple.getItem2*"
  name: "getItem2"
  nameWithType: "Tuple<T1,T2>.getItem2"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.getItem2"
  package: "com.microsoft.samples.subpackage"
- uid: "com.microsoft.samples.subpackage.Tuple.setItem2*"
  name: "setItem2"
  nameWithType: "Tuple<T1,T2>.setItem2"
  fullName: "com.microsoft.samples.subpackage.Tuple<T1,T2>.setItem2"
  package: "com.microsoft.samples.subpackage"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
