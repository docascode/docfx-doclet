### YamlMime:ManagedReference
items:
- uid: "com.microsoft.samples.KeyValuePair"
  id: "KeyValuePair"
  parent: "com.microsoft.samples"
  children:
  - "com.microsoft.samples.KeyValuePair.KeyValuePair()"
  - "com.microsoft.samples.KeyValuePair.KeyValuePair(K,V)"
  - "com.microsoft.samples.KeyValuePair.getKey()"
  - "com.microsoft.samples.KeyValuePair.getValue()"
  langs:
  - "java"
  name: "KeyValuePair<K,V>"
  nameWithType: "KeyValuePair<K,V>"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>"
  type: "Class"
  package: "com.microsoft.samples"
  syntax:
    content: "public class KeyValuePair<K,V>"
    typeParameters:
    - id: "K"
    - id: "V"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.samples.KeyValuePair.KeyValuePair()"
  id: "KeyValuePair()"
  parent: "com.microsoft.samples.KeyValuePair"
  langs:
  - "java"
  name: "KeyValuePair()"
  nameWithType: "KeyValuePair<K,V>.KeyValuePair()"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.KeyValuePair()"
  overload: "com.microsoft.samples.KeyValuePair.KeyValuePair*"
  type: "Constructor"
  package: "com.microsoft.samples"
  syntax:
    content: "public KeyValuePair()"
- uid: "com.microsoft.samples.KeyValuePair.KeyValuePair(K,V)"
  id: "KeyValuePair(K,V)"
  parent: "com.microsoft.samples.KeyValuePair"
  langs:
  - "java"
  name: "KeyValuePair(K key, V value)"
  nameWithType: "KeyValuePair<K,V>.KeyValuePair(K key, V value)"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.KeyValuePair(K key, V value)"
  overload: "com.microsoft.samples.KeyValuePair.KeyValuePair*"
  type: "Constructor"
  package: "com.microsoft.samples"
  syntax:
    content: "public KeyValuePair(K key, V value)"
    parameters:
    - id: "key"
      type: "K"
    - id: "value"
      type: "V"
- uid: "com.microsoft.samples.KeyValuePair.getKey()"
  id: "getKey()"
  parent: "com.microsoft.samples.KeyValuePair"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "KeyValuePair<K,V>.getKey()"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.getKey()"
  overload: "com.microsoft.samples.KeyValuePair.getKey*"
  type: "Method"
  package: "com.microsoft.samples"
  syntax:
    content: "public K getKey()"
    return:
      type: "K"
- uid: "com.microsoft.samples.KeyValuePair.getValue()"
  id: "getValue()"
  parent: "com.microsoft.samples.KeyValuePair"
  langs:
  - "java"
  name: "getValue()"
  nameWithType: "KeyValuePair<K,V>.getValue()"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.getValue()"
  overload: "com.microsoft.samples.KeyValuePair.getValue*"
  type: "Method"
  package: "com.microsoft.samples"
  syntax:
    content: "public V getValue()"
    return:
      type: "V"
references:
- uid: "com.microsoft.samples.KeyValuePair.KeyValuePair*"
  name: "KeyValuePair"
  nameWithType: "KeyValuePair<K,V>.KeyValuePair"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.KeyValuePair"
  package: "com.microsoft.samples"
- uid: "K"
  spec.java:
  - uid: "K"
    name: "K"
    fullName: "K"
- uid: "V"
  spec.java:
  - uid: "V"
    name: "V"
    fullName: "V"
- uid: "com.microsoft.samples.KeyValuePair.getKey*"
  name: "getKey"
  nameWithType: "KeyValuePair<K,V>.getKey"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.getKey"
  package: "com.microsoft.samples"
- uid: "com.microsoft.samples.KeyValuePair.getValue*"
  name: "getValue"
  nameWithType: "KeyValuePair<K,V>.getValue"
  fullName: "com.microsoft.samples.KeyValuePair<K,V>.getValue"
  package: "com.microsoft.samples"
